name: Build and Publish Python Client Package

on:
  workflow_dispatch:

# Add top-level permissions block
permissions:
  id-token: write
  contents: read

jobs:
  macos:
    runs-on: macos-latest
    # Add permissions to job
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: 'true'
          working-directory: ./autonomi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-py${{ matrix.python-version }}
          path: ./autonomi/dist/*.whl
          if-no-files-found: error

  windows:
    runs-on: windows-latest
    # Add permissions to job
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist
          sccache: 'true'
          working-directory: ./autonomi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}-py${{ matrix.python-version }}
          path: ./autonomi/dist/*.whl
          if-no-files-found: error

  linux:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        target: [x86_64]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          before-script-linux: |
            rustup default stable
            rustup component add rustfmt
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: 'true'
          working-directory: ./autonomi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-py${{ matrix.python-version }}
          path: ./autonomi/dist/*.whl
          if-no-files-found: error

  musllinux:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          PYO3_CROSS_PYTHON_VERSION: ${{ matrix.python-version }}
          PYO3_CROSS: "1"
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: 'true'
          working-directory: ./autonomi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}-py${{ matrix.python-version }}
          path: ./autonomi/dist/*.whl
          if-no-files-found: error

  sdist:
    runs-on: ubuntu-latest
    # Add permissions to job
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Prepare standalone package
        run: |
          # Create build directory structure
          mkdir -p build/autonomi
          cp -r autonomi/* build/autonomi/
          
          # First, copy all workspace members
          for dir in ant-* test-utils evmlib; do
            if [ -d "$dir" ]; then
              echo "Copying $dir to build directory"
              cp -r "$dir" "build/$dir"
            fi
          done
          
          # Create a new workspace Cargo.toml in the build directory
          cat > build/Cargo.toml << EOL
          [workspace]
          resolver = "2"
          members = [
              "ant-bootstrap",
              "ant-build-info",
              "ant-cli",
              "ant-evm",
              "ant-logging",
              "ant-metrics",
              "ant-networking",
              "ant-node",
              "ant-node-manager",
              "ant-node-rpc-client",
              "ant-protocol",
              "ant-service-management",
              "ant-token-supplies",
              "autonomi",
              "evmlib",
              "test-utils"
          ]

          [workspace.lints.rust]
          arithmetic_overflow = "forbid"
          mutable_transmutes = "forbid"
          no_mangle_const_items = "forbid"
          trivial_casts = "warn"
          trivial_numeric_casts = "warn"
          unsafe_code = "warn"
          unknown_crate_types = "forbid"
          unused_extern_crates = "warn"
          unused_import_braces = "warn"

          [workspace.lints.clippy]
          clone_on_ref_ptr = "warn"
          unicode_not_nfc = "warn"
          uninlined_format_args = "warn"
          unused_async = "warn"
          unwrap_used = "warn"

          [profile.dev]
          debug = 0
          strip = "debuginfo"

          [workspace.metadata.release]
          pre-release-commit-message = "chore(release): release commit, tags, deps and changelog updates"
          publish = false
          push = false
          tag = false

          [workspace.dependencies]
          backtrace = "=0.3.71"
          EOL
          
          # Update all dependency paths to be relative
          find build -name "Cargo.toml" -exec sed -i "s|path = \"/home/runner/work/autonomi/autonomi/build/|path = \"|g" {} \;
          
          # Display directory structure for debugging
          echo "Contents of build directory:"
          ls -la build/
          echo "Contents of workspace Cargo.toml:"
          cat build/Cargo.toml
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: build/autonomi
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: build/autonomi/dist/*.tar.gz
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, musllinux, sdist]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true